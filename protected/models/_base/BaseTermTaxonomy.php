<?php

/**
 * This is the model base class for the table "{{term_taxonomy}}".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "TermTaxonomy".
 *
 * Columns in table "{{term_taxonomy}}" available as properties of the model,
 * and there are no model relations.
 *
 * @property string $term_taxonomy_id
 * @property string $term_id
 * @property string $taxonomy
 * @property string $description
 * @property string $parent
 * @property string $count
 *
 */
abstract class BaseTermTaxonomy extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return '{{term_taxonomy}}';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'TermTaxonomy|TermTaxonomies', $n);
	}

	public static function representingColumn() {
		return 'taxonomy';
	}

	public function rules() {
		return array(
			array('description', 'required'),
			array('term_id, parent, count', 'length', 'max'=>20),
			array('taxonomy', 'length', 'max'=>32),
			array('term_id, taxonomy, parent, count', 'default', 'setOnEmpty' => true, 'value' => null),
			array('term_taxonomy_id, term_id, taxonomy, description, parent, count', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'term_taxonomy_id' => Yii::t('app', 'Term Taxonomy'),
			'term_id' => Yii::t('app', 'Term'),
			'taxonomy' => Yii::t('app', 'Taxonomy'),
			'description' => Yii::t('app', 'Description'),
			'parent' => Yii::t('app', 'Parent'),
			'count' => Yii::t('app', 'Count'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('term_taxonomy_id', $this->term_taxonomy_id, true);
		$criteria->compare('term_id', $this->term_id, true);
		$criteria->compare('taxonomy', $this->taxonomy, true);
		$criteria->compare('description', $this->description, true);
		$criteria->compare('parent', $this->parent, true);
		$criteria->compare('count', $this->count, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}